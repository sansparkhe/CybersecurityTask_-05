from scapy.all import sniff
from scapy.layers.inet import IP, TCP, UDP

def packet_callback(packet):
    # Check if the packet has an IP layer
    if IP in packet:
        ip_src = packet[IP].src
        ip_dst = packet[IP].dst
        protocol = packet[IP].proto

        print(f"Source IP: {ip_src}")
        print(f"Destination IP: {ip_dst}")
        print(f"Protocol: {protocol}")

        # Check for TCP/UDP layer and extract ports
        if TCP in packet:
            tcp_sport = packet[TCP].sport
            tcp_dport = packet[TCP].dport
            print(f"Source Port: {tcp_sport}")
            print(f"Destination Port: {tcp_dport}")
            print("Payload Data:")
            print(packet[TCP].payload)
        elif UDP in packet:
            udp_sport = packet[UDP].sport
            udp_dport = packet[UDP].dport
            print(f"Source Port: {udp_sport}")
            print(f"Destination Port: {udp_dport}")
            print("Payload Data:")
            print(packet[UDP].payload)

        print("-" * 50)

# Start the packet sniffer
print("Starting packet sniffer...")
sniff(prn=packet_callback, count=10)  # Capture 10 packets, modify as needed
